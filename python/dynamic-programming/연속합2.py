"""
13398번 문제
n개의 정수로 이루어진 임의의 수열이 주어진다. 
우리는 이 중 연속된 몇 개의 수를 선택해서 구할 수 있는 합 중 가장 큰 합을 구하려고 한다.
단, 수는 한 개 이상 선택해야 한다. 
또, 수열에서 수를 하나 제거할 수 있다. (제거하지 않아도 된다)
예를 들어서 10, -4, 3, 1, 5, 6, -35, 12, 21, -1 이라는 수열이 주어졌다고 하자. 여기서 수를 제거하지 않았을 때의 정답은 12+21인 33이 정답이 된다.
만약, -35를 제거한다면, 수열은 10, -4, 3, 1, 5, 6, 12, 21, -1이 되고, 여기서 정답은 10-4+3+1+5+6+12+21인 54가 된다.
첫째 줄에 정수 n(1 ≤ n ≤ 100,000)이 주어지고 둘째 줄에는 n개의 정수로 이루어진 수열이 주어진다. 수는 -1,000보다 크거나 같고, 1,000보다 작거나 같은 정수이다.
첫째 줄에 답을 출력한다.

N이 1보다 클 경우 dp를 찾으면 되는데 

1. 특정 원소를 제거하지 않은 경우
dp[0][i] = max(dp[0][i - 1] + Arr[i], dp[i]) : 아무런 원소를 제거하지 않고 일반적인 연속합으로 구하는 경우이다.

2. 특정 원소를 제거하는 경우
dp[1][i] = max(dp[0][i - 1], dp[1][i - 1] + Arr[i]) : 다음의 두가지 사항중 큰 값을 대입
- i번째 원소를 제거하는 경우 -> 위에서 구한 i - 1 번째 연속 합의 최대값을 그대로 대입
- i번째 이전의 원소를 이미 제거하여 이전에 구해놓은 dp값에 현재 i 값을 더해주는 경우 -> i번째 이전의 원소를 제거한 연속합 값 + 현재 원소 i 값 
"""
import sys
input = sys.stdin.readline

N = int(input())
Arr = list(map(int, input().split()))
dp = [[x for x in Arr] for _ in range(2)]

for i in range(1, N):
    dp[0][i] = max(dp[0][i - 1] + Arr[i], dp[0][i])
    dp[1][i] = max(dp[1][i - 1] + Arr[i], dp[0][i - 1])

print(max(max(dp[0]), max(dp[1])))

