"""
15990번 문제
정수 n이 주어졌을 때, n을 1, 2, 3의 합으로 나타내는 방법의 수를 구하는 프로그램을 작성하시오.
같은 수를 두 번 이상 연속해서 사용하면 안 된다.
첫째 줄에 테스트 케이스의 개수 T가 주어진다. 각 테스트 케이스는 한 줄로 이루어져 있고, 정수 n이 주어진다. 
n은 양수이며 100,000보다 작거나 같다.
각 테스트 케이스마다, n을 1, 2, 3의 합으로 나타내는 방법의 수를 1,000,000,009로 나눈 나머지를 출력한다.
"""
"""
첫번째 배열의 수는 만들고자하는 수
두번째 배열의 수는 마지막에 사용된 숫자
dp = [[0] * 4 for _ in range(100001)]에서 4를 곱하는 이유는
각 숫자를 만드는 방법을 저장하기 위해 각 숫자에 대한 마지막 숫자가 1, 2, 3인 경우를 따로 계산하고
저장하기 위함입니다.
dp 배열의 각 요소는 특정 숫자를 만드는 데 사용할 수 있는 마지막 숫자(1, 2, 또는 3)에 따른 방법의 수를 저장합니다.
4를 곱하는 이유는 인덱스를 1부터 시작하여 편리하게 사용하기 위함입니다. 
실제로 0번 인덱스는 사용되지 않습니다.
이렇게 함으로써, 코드의 가독성을 높이고, 
마지막 숫자가 1, 2, 3인 경우를 직관적으로 처리할 수 있습니다.
"""

import sys

def precompute():
    dp = [[0] * 4 for _ in range(100001)]
    dp[1][1] = 1
    dp[2][2] = 1
    dp[3][1], dp[3][2], dp[3][3] = 1, 1, 1

    for i in range(4, 100001):
        dp[i][1] = (dp[i-1][2] + dp[i-1][3]) % 1000000009
        dp[i][2] = (dp[i-2][1] + dp[i-2][3]) % 1000000009
        dp[i][3] = (dp[i-3][1] + dp[i-3][2]) % 1000000009

    return dp

# 미리 계산
dp = precompute()

# 메인 로직
t = int(sys.stdin.readline().strip())
for _ in range(t):
    n = int(sys.stdin.readline().strip())
    print(sum(dp[n]) % 1000000009)
