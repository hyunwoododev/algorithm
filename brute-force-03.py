# 정수 4를 1, 2, 3의 합으로 나타내는 방법은 총 7가지가 있습니다.
#  1+1+1+1, 1+1+2, 1+2+1, 1+3, 2+1+1, 2+2, 3+1
# 정수 n이 주어졌을 때, n을 1, 2, 3의 합으로 나타내는 방법의 수를 구하는 프로그램을 작성하세요.

def solve(n):
    if n == 1:
        return 1
    if n == 2:
        return 2
    if n == 3:
        return 4
    return solve(n-1) + solve(n-2) + solve(n-3)

t = int(input())

for _ in range(t):
    n = int(input())
    print(solve(n))

# 아, 제가 이해했습니다. 여기서 중요한 것은 당신이 언급한 "방법의 수"와 "실제 방법"을 구분하는 것입니다.
# 당신이 "10을 만드는 방법의 수"에 대해 언급한 것은 "방법의 수"를 계산하는 것입니다. 반면에 "6을 만드는 방법에 2+2를 더하면 되는거 아닌가"는 실제 방법 중 하나를 지칭하는 것입니다.
# 이를 좀 더 구체적으로 예를 들어 설명해보겠습니다:
# 9를 만드는 방법의 수를 계산하면, 그 결과는 9를 만드는 모든 가능한 조합의 수가 됩니다. 그리고 그 방법의 수에 1을 더하는 것이 아니라, 각각의 방법에 1을 더해서 10을 만드는 새로운 방법을 만들어낼 수 있습니다.
# 마찬가지로 8을 만드는 방법의 수는 8을 만드는 모든 가능한 조합의 수입니다. 그리고 이 방법의 수에 2를 더하는 것이 아니라, 각각의 방법에 2를 더해서 10을 만드는 새로운 방법을 만들어낼 수 있습니다.
# 이렇게 "방법의 수"와 "실제 방법"을 구분해서 생각하면, "6을 만드는 방법에 2+2를 더하면 되는거 아닌가"라는 의문이 생겨도 그것이 전체 "방법의 수"를 구하는 데 있어서 어떻게 적용되는지를 이해할 수 있습니다.
# 단순히 "6에 2+2를 더하면 10이 되는거 아닌가?"라는 생각은 옳습니다. 하지만 우리가 원하는 것은 10을 만드는 모든 가능한 조합의 수를 찾는 것이기 때문에, 그렇게 단순히 접근하면 안됩니다.